#include <iostream>
struct A
{
    bool b1 : 1;  // 表示只占用一位而不是8位, 1可以改为2，3... 8
    bool b2 : 1;
    // int i : 4;
};

struct A2
{
    char b : 1000; // 1000/8=125， 占了128个字节，只有一个字节有效。
};

int main()
{
    // 位域：显示表明对象尺寸（所占位数）
    // – 在结构体 / 类中使用
    // – 多个位域对象可能会被打包存取
    // – 声明了位域的对象无法取地址，因此不能使用指针或非常量引用进行绑定
    // – 尺寸通常会小于对象类型所对应的尺寸，否则取值受类型限制
    std::cout << sizeof(A) << std::endl;  //1
    std::cout << sizeof(A2) << std::endl;  //128

    // volatile
    // – 表明一个对象的可能会被当前程序以外的逻辑修改
    // – 相应对象的读写可能会加重程序负担
    // 注意慎重使用 一些情况下可以用 atomic 代替
}